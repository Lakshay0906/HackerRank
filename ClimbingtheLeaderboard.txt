'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

function climbingLeaderboard(scores, alice) {
    let rank = [];
    for (let i = 0; i < scores.length; i++) {
        if (rank.length === 0) {
            rank.push(scores[i]);
        }
        else {
            if (rank[rank.length - 1] === scores[i]) {
                continue;
            }
            rank.push(scores[i]);
        }
    }

    let res = [];
    let lowestRank = rank.length;
    for (let i = 0; i < alice.length; i++) {
        while (alice[i] >= rank[lowestRank - 1] && lowestRank > 0) {
            rank.pop;
            lowestRank--;
        }
        res.push(lowestRank + 1);
    }
    
    return res;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const rankedCount = parseInt(readLine().trim(), 10);

    const ranked = readLine().replace(/\s+$/g, '').split(' ').map(rankedTemp => parseInt(rankedTemp, 10));

    const playerCount = parseInt(readLine().trim(), 10);

    const player = readLine().replace(/\s+$/g, '').split(' ').map(playerTemp => parseInt(playerTemp, 10));

    const result = climbingLeaderboard(ranked, player);

    ws.write(result.join('\n') + '\n');

    ws.end();
}
